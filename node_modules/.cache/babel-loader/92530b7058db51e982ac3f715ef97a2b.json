{"ast":null,"code":"import React, { forwardRef, useContext } from 'react';\nimport { IconContext } from './index.esm.js';\nimport { objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../_virtual/_rollupPluginBabelHelpers.js';\nvar IconBase = /*#__PURE__*/forwardRef(function (props, ref) {\n  var color = props.color,\n      size = props.size,\n      weight = props.weight,\n      mirrored = props.mirrored,\n      children = props.children,\n      renderPath = props.renderPath,\n      restProps = _objectWithoutPropertiesLoose(props, [\"color\", \"size\", \"weight\", \"mirrored\", \"children\", \"renderPath\"]);\n\n  var _useContext = useContext(IconContext),\n      _useContext$color = _useContext.color,\n      contextColor = _useContext$color === void 0 ? \"currentColor\" : _useContext$color,\n      contextSize = _useContext.size,\n      _useContext$weight = _useContext.weight,\n      contextWeight = _useContext$weight === void 0 ? \"regular\" : _useContext$weight,\n      _useContext$mirrored = _useContext.mirrored,\n      contextMirrored = _useContext$mirrored === void 0 ? false : _useContext$mirrored,\n      restContext = _objectWithoutPropertiesLoose(_useContext, [\"color\", \"size\", \"weight\", \"mirrored\"]);\n\n  return React.createElement(\"svg\", Object.assign({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size != null ? size : contextSize,\n    height: size != null ? size : contextSize,\n    fill: color != null ? color : contextColor,\n    viewBox: \"0 0 256 256\",\n    transform: mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined\n  }, restContext, restProps), children, React.createElement(\"rect\", {\n    width: \"256\",\n    height: \"256\",\n    fill: \"none\"\n  }), renderPath(weight != null ? weight : contextWeight, color != null ? color : contextColor));\n});\nIconBase.displayName = \"IconBase\";\nexport default IconBase;","map":{"version":3,"sources":["../../src/lib/IconBase.tsx"],"names":["IconBase","forwardRef","color","size","weight","mirrored","children","renderPath","restProps","props","contextColor","contextSize","contextWeight","contextMirrored","restContext","useContext","ref","xmlns","width","height","fill","viewBox","transform","undefined"],"mappings":";;;AAYA,IAAMA,QAAQ,GAAA,aAAGC,UAAU,CAA+B,UAAA,KAAA,EAAA,GAAA,EAAA;MAEtDC,KAAAA,GAOEO,KAAAA,CAPFP,K;MACAC,IAAAA,GAMEM,KAAAA,CANFN,I;MACAC,MAAAA,GAKEK,KAAAA,CALFL,M;MACAC,QAAAA,GAIEI,KAAAA,CAJFJ,Q;MACAC,QAAAA,GAGEG,KAAAA,CAHFH,Q;MACAC,UAAAA,GAEEE,KAAAA,CAFFF,U;MACGC,SAAAA,GAAAA,6BAAAA,CACDC,KADCD,EACDC,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,UAAAA,EAAAA,UAAAA,EAAAA,YAAAA,CADCD,C;;oBASDO,UAAU,CAAA,WAAA,C;sCALZb,K;MAAOQ,YAAAA,GAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAe,cAAfA,GAAe,iB;MAChBC,WAAAA,GAAAA,WAAAA,CAANR,I;uCACAC,M;MAAQQ,aAAAA,GAAAA,kBAAAA,KAAAA,KAAAA,CAAAA,GAAgB,SAAhBA,GAAgB,kB;yCACxBP,Q;MAAUQ,eAAAA,GAAAA,oBAAAA,KAAAA,KAAAA,CAAAA,GAAkB,KAAlBA,GAAkB,oB;MACzBC,WAAAA,GAAAA,6BAAAA,CAAAA,WAAAA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA,EAAAA,QAAAA,EAAAA,UAAAA,CAAAA,C;;AAGL,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACEE,IAAAA,GAAG,EAAEA,GADP;AAEEC,IAAAA,KAAK,EAAC,4BAFR;AAGEC,IAAAA,KAAK,EAAEf,IAAF,IAAA,IAAEA,GAAF,IAAEA,GAAQQ,WAHjB;AAIEQ,IAAAA,MAAM,EAAEhB,IAAF,IAAA,IAAEA,GAAF,IAAEA,GAAQQ,WAJlB;AAKES,IAAAA,IAAI,EAAElB,KAAF,IAAA,IAAEA,GAAF,KAAEA,GAASQ,YALjB;AAMEW,IAAAA,OAAO,EAAC,aANV;AAOEC,IAAAA,SAAS,EAAEjB,QAAQ,IAARA,eAAAA,GAAAA,cAAAA,GAA+CkB;AAP5D,GAAA,EAQMT,WARN,EAAA,SAAA,CAAA,EAAA,QAAA,EAYE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAMI,IAAAA,KAAK,EAAC,KAAZ;AAAkBC,IAAAA,MAAM,EAAC,KAAzB;AAA+BC,IAAAA,IAAI,EAAC;AAApC,GAAA,CAZF,EAaGb,UAAU,CAACH,MAAD,IAAA,IAACA,GAAD,MAACA,GAAD,aAAA,EAA0BF,KAA1B,IAAA,IAA0BA,GAA1B,KAA0BA,GAdzC,YAce,CAbb,CADF;AAnBF,CAA2B,CAA3B;AAsCAF,QAAQ,CAARA,WAAAA,GAAAA,UAAAA","sourcesContent":["import React, { forwardRef, useContext } from \"react\";\nimport { IconProps, IconWeight, IconContext } from \"../lib\";\n\nexport type RenderFunction = (\n  weight: IconWeight,\n  color: string\n) => React.ReactNode | null;\n\ninterface IconBaseProps extends IconProps {\n  renderPath: RenderFunction;\n}\n\nconst IconBase = forwardRef<SVGSVGElement, IconBaseProps>((props, ref) => {\n  const {\n    color,\n    size,\n    weight,\n    mirrored,\n    children,\n    renderPath,\n    ...restProps\n  } = props;\n\n  const {\n    color: contextColor = \"currentColor\",\n    size: contextSize,\n    weight: contextWeight = \"regular\",\n    mirrored: contextMirrored = false,\n    ...restContext\n  } = useContext(IconContext);\n\n  return (\n    <svg\n      ref={ref}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size ?? contextSize}\n      height={size ?? contextSize}\n      fill={color ?? contextColor}\n      viewBox=\"0 0 256 256\"\n      transform={mirrored || contextMirrored ? \"scale(-1, 1)\" : undefined}\n      {...restContext}\n      {...restProps}\n    >\n      {children}\n      <rect width=\"256\" height=\"256\" fill=\"none\" />\n      {renderPath(weight ?? contextWeight, color ?? contextColor)}\n    </svg>\n  );\n});\n\nIconBase.displayName = \"IconBase\";\n\nexport default IconBase;\n"]},"metadata":{},"sourceType":"module"}