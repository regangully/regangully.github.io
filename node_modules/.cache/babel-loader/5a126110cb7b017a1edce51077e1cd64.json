{"ast":null,"code":"import _slicedToArray from\"/Users/regangully/Development/regangully.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/Users/regangully/Development/regangully.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{motion}from\"framer-motion\";// Word wrapper\nimport{jsx as _jsx}from\"react/jsx-runtime\";var Wrapper=function Wrapper(props){// We'll do this to prevent wrapping of words using CSS\nreturn/*#__PURE__*/_jsx(\"span\",{className:\"word-wrapper\",children:props.children});};// Map API \"type\" vaules to JSX tag names\nvar tagMap={\"paragraph\":\"p\",\"heading1\":\"h1\",\"heading2\":\"h2\"};// AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\nvar AnimatedCharacters=function AnimatedCharacters(props){// Framer Motion variant object, for controlling animation\nvar item={hidden:{y:\"200%\",transition:{ease:[0.455,0.03,0.515,0.955],duration:0.75}},visible:{y:0,transition:{ease:[0.455,0.03,0.515,0.955],duration:0.65}}};//  Split each word of props.text into an array\nvar splitWords=props.text.split(\" \");// Create storage array\nvar words=[];// Push each word into words array\nvar _iterator=_createForOfIteratorHelper(splitWords.entries()),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _step$value=_slicedToArray(_step.value,2),_item=_step$value[1];words.push(_item.split(\"\"));}// Add a space (\"\\u00A0\") to the end of each word\n}catch(err){_iterator.e(err);}finally{_iterator.f();}words.map(function(word){return word.push(\"\\xA0\");});// Get the tag name from tagMap\nvar Tag=tagMap[props.type];return/*#__PURE__*/_jsx(Tag,{className:props.classes,children:words.map(function(word,index){return/*#__PURE__*/ (// Wrap each word in the Wrapper component\n_jsx(Wrapper,{children:words[index].flat().map(function(element,index){return/*#__PURE__*/_jsx(\"span\",{style:{overflow:\"hidden\",display:\"inline-block\"},children:/*#__PURE__*/_jsx(motion.span,{style:{display:\"inline-block\"},variants:item,children:element})},index);})},index));})});};export default AnimatedCharacters;","map":{"version":3,"sources":["/Users/regangully/Development/regangully.github.io/src/Components/AnimatedText/AnimatedText.tsx"],"names":["motion","Wrapper","props","children","tagMap","AnimatedCharacters","item","hidden","y","transition","ease","duration","visible","splitWords","text","split","words","entries","push","map","word","Tag","type","classes","index","flat","element","overflow","display"],"mappings":"0WAAA,OAASA,MAAT,KAAuB,eAAvB,CAEA;2CACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAgB,CAC9B;AACA,mBAAO,aAAM,SAAS,CAAC,cAAhB,UAAgCA,KAAK,CAACC,QAAtC,EAAP,CACD,CAHD,CAKA;AACA,GAAMC,CAAAA,MAAW,CAAG,CAClB,YAAa,GADK,CAElB,WAAY,IAFM,CAGlB,WAAY,IAHM,CAApB,CAMA;AACA;AACA;AACA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACH,KAAD,CAAgB,CACzC;AACA,GAAMI,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,CACNC,CAAC,CAAE,MADG,CAENC,UAAU,CAAE,CAAEC,IAAI,CAAE,CAAC,KAAD,CAAQ,IAAR,CAAc,KAAd,CAAqB,KAArB,CAAR,CAAqCC,QAAQ,CAAE,IAA/C,CAFN,CADG,CAKXC,OAAO,CAAE,CACPJ,CAAC,CAAE,CADI,CAEPC,UAAU,CAAE,CAAEC,IAAI,CAAE,CAAC,KAAD,CAAQ,IAAR,CAAc,KAAd,CAAqB,KAArB,CAAR,CAAqCC,QAAQ,CAAE,IAA/C,CAFL,CALE,CAAb,CAWA;AACA,GAAME,CAAAA,UAAU,CAAGX,KAAK,CAACY,IAAN,CAAWC,KAAX,CAAiB,GAAjB,CAAnB,CAEA;AACA,GAAMC,CAAAA,KAAY,CAAG,EAArB,CAEA;AAnByC,yCAoBlBH,UAAU,CAACI,OAAX,EApBkB,YAoBzC,+CAA6C,+CAA/BX,KAA+B,gBAC3CU,KAAK,CAACE,IAAN,CAAWZ,KAAI,CAACS,KAAL,CAAW,EAAX,CAAX,EACD,CAED;AAxByC,qDAyBzCC,KAAK,CAACG,GAAN,CAAU,SAACC,IAAD,CAAU,CAClB,MAAOA,CAAAA,IAAI,CAACF,IAAL,CAAU,MAAV,CAAP,CACD,CAFD,EAIA;AACA,GAAMG,CAAAA,GAAG,CAAGjB,MAAM,CAACF,KAAK,CAACoB,IAAP,CAAlB,CAEA,mBACE,KAAC,GAAD,EAAK,SAAS,CAAEpB,KAAK,CAACqB,OAAtB,UACGP,KAAK,CAACG,GAAN,CAAU,SAACC,IAAD,CAAOI,KAAP,CAAiB,CAC1B,oBACE;AACA,KAAC,OAAD,WACGR,KAAK,CAACQ,KAAD,CAAL,CAAaC,IAAb,GAAoBN,GAApB,CAAwB,SAACO,OAAD,CAAeF,KAAf,CAAiC,CACxD,mBACE,aACE,KAAK,CAAE,CACLG,QAAQ,CAAE,QADL,CAELC,OAAO,CAAE,cAFJ,CADT,uBAOE,KAAC,MAAD,CAAQ,IAAR,EACE,KAAK,CAAE,CAAEA,OAAO,CAAE,cAAX,CADT,CAEE,QAAQ,CAAEtB,IAFZ,UAIGoB,OAJH,EAPF,EAKOF,KALP,CADF,CAgBD,CAjBA,CADH,EAAcA,KAAd,CAFF,EAuBD,CAxBA,CADH,EADF,CA8BD,CA9DD,CAgEA,cAAenB,CAAAA,kBAAf","sourcesContent":["import { motion } from \"framer-motion\";\n\n// Word wrapper\nconst Wrapper = (props: any) => {\n  // We'll do this to prevent wrapping of words using CSS\n  return <span className=\"word-wrapper\">{props.children}</span>;\n};\n\n// Map API \"type\" vaules to JSX tag names\nconst tagMap: any = {\n  \"paragraph\": \"p\",\n  \"heading1\": \"h1\",\n  \"heading2\": \"h2\"\n};\n\n// AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\nconst AnimatedCharacters = (props: any) => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.75 }\n    },\n    visible: {\n      y: 0,\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.65 }\n    }\n  };\n\n  //  Split each word of props.text into an array\n  const splitWords = props.text.split(\" \");\n\n  // Create storage array\n  const words: any[] = [];\n\n  // Push each word into words array\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  }\n\n  // Add a space (\"\\u00A0\") to the end of each word\n  words.map((word) => {\n    return word.push(\"\\u00A0\");\n  });\n\n  // Get the tag name from tagMap\n  const Tag = tagMap[props.type];\n\n  return (\n    <Tag className={props.classes}>\n      {words.map((word, index) => {\n        return (\n          // Wrap each word in the Wrapper component\n          <Wrapper key={index}>\n            {words[index].flat().map((element: any, index: number) => {\n              return (\n                <span\n                  style={{\n                    overflow: \"hidden\",\n                    display: \"inline-block\"\n                  }}\n                  key={index}\n                >\n                  <motion.span\n                    style={{ display: \"inline-block\" }}\n                    variants={item}\n                  >\n                    {element}\n                  </motion.span>\n                </span>\n              );\n            })}\n          </Wrapper>\n        );\n      })}\n      {/* {} */}\n    </Tag>\n  );\n};\n\nexport default AnimatedCharacters;\n"]},"metadata":{},"sourceType":"module"}