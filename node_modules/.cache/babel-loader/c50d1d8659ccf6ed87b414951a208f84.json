{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { renderPathForWeight } from '../lib/index.esm.js';\nimport IconBase from '../lib/IconBase.esm.js';\n/* GENERATED FILE */\n\nvar pathsByWeight = /*#__PURE__*/new Map();\npathsByWeight.set(\"bold\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"40\",\n    y: \"40\",\n    width: \"176\",\n    height: \"176\",\n    rx: \"8\",\n    transform: \"translate(0 256) rotate(-90)\",\n    strokeWidth: \"24\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"polyline\", {\n    points: \"108 100 156 100 156 148\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"100\",\n    y1: \"156\",\n    x2: \"156\",\n    y2: \"100\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }));\n});\npathsByWeight.set(\"duotone\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"40\",\n    y: \"40\",\n    width: \"176\",\n    height: \"176\",\n    rx: \"8\",\n    transform: \"translate(0 256) rotate(-90)\",\n    opacity: \"0.2\"\n  }), React.createElement(\"rect\", {\n    x: \"40\",\n    y: \"40\",\n    width: \"176\",\n    height: \"176\",\n    rx: \"8\",\n    transform: \"translate(0 256) rotate(-90)\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"polyline\", {\n    points: \"108 100 156 100 156 148\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"100\",\n    y1: \"156\",\n    x2: \"156\",\n    y2: \"100\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\npathsByWeight.set(\"fill\", function () {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M32,48V208a16.01833,16.01833,0,0,0,16,16H208a16.01833,16.01833,0,0,0,16-16V48a16.01833,16.01833,0,0,0-16-16H48A16.01833,16.01833,0,0,0,32,48ZM94.34326,150.34277,136.686,108H108a8,8,0,0,1,0-16h48c.05981,0,.11768.00781.17725.00879.20251.00488.405.01123.60693.03076.13867.01367.27344.03857.41.05908.12171.01856.24366.03174.36451.05567.14636.02881.2882.06884.43151.10547.10938.02783.21949.05175.32789.084.13732.042.27014.09277.40429.1416.11231.04053.22547.07715.33618.12305.12281.05078.24073.11035.36036.167.1173.05566.23559.10742.35058.16895.11231.06054.219.1289.32813.19384.11523.06885.23181.13428.34423.20948.1167.07812.22669.165.339.249.09681.07227.19629.13965.29053.21728.1825.14991.35657.30909.525.47413.01953.01953.041.03515.0603.05468.01672.01661.03052.03516.04712.05225.168.1709.32959.34766.48169.53271.08007.09766.14966.2002.22436.3003.0813.10888.166.21582.242.3291.07788.11621.1455.2373.21655.35644.0625.105.12829.207.186.31495.06482.12109.11988.2456.178.36914.05322.11328.10987.22461.158.34033.04956.11963.0896.24219.13318.36377.04468.125.09253.24756.13123.375.0371.123.06433.24756.09545.37158.03235.12891.06861.25635.09449.38721.02881.145.04614.2915.06677.4375.01587.1123.03747.22265.04858.33642.026.26367.03992.52832.03992.793V148a8,8,0,0,1-16,0V119.314l-42.34326,42.34327a8.00018,8.00018,0,0,1-11.31348-11.31446Z\"\n  }));\n});\npathsByWeight.set(\"light\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"40\",\n    y: \"40\",\n    width: \"176\",\n    height: \"176\",\n    rx: \"8\",\n    transform: \"translate(0 256) rotate(-90)\",\n    strokeWidth: \"12\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"polyline\", {\n    points: \"108 100 156 100 156 148\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"100\",\n    y1: \"156\",\n    x2: \"156\",\n    y2: \"100\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }));\n});\npathsByWeight.set(\"thin\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"40\",\n    y: \"40\",\n    width: \"176\",\n    height: \"176\",\n    rx: \"8\",\n    transform: \"translate(0 256) rotate(-90)\",\n    strokeWidth: \"8\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"polyline\", {\n    points: \"108 100 156 100 156 148\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"100\",\n    y1: \"156\",\n    x2: \"156\",\n    y2: \"100\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }));\n});\npathsByWeight.set(\"regular\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"40\",\n    y: \"40\",\n    width: \"176\",\n    height: \"176\",\n    rx: \"8\",\n    transform: \"translate(0 256) rotate(-90)\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"polyline\", {\n    points: \"108 100 156 100 156 148\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"100\",\n    y1: \"156\",\n    x2: \"156\",\n    y2: \"100\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\n\nvar renderPath = function renderPath(weight, color) {\n  return renderPathForWeight(weight, color, pathsByWeight);\n};\n\nvar ArrowSquareUpRight = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(IconBase, Object.assign({\n    ref: ref\n  }, props, {\n    renderPath: renderPath\n  }));\n});\nArrowSquareUpRight.displayName = \"ArrowSquareUpRight\";\nexport default ArrowSquareUpRight;","map":{"version":3,"sources":["../../src/icons/ArrowSquareUpRight.tsx"],"names":["pathsByWeight","x","y","width","height","rx","transform","strokeWidth","stroke","color","strokeLinecap","strokeLinejoin","fill","points","x1","y1","x2","y2","opacity","d","renderPath","renderPathForWeight","ArrowSquareUpRight","forwardRef","ref","props"],"mappings":"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","sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      transform=\"translate(0 256) rotate(-90)\"\n      strokeWidth=\"24\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <polyline\n      points=\"108 100 156 100 156 148\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"100\"\n      y1=\"156\"\n      x2=\"156\"\n      y2=\"100\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      transform=\"translate(0 256) rotate(-90)\"\n      opacity=\"0.2\"\n    />\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      transform=\"translate(0 256) rotate(-90)\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <polyline\n      points=\"108 100 156 100 156 148\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"100\"\n      y1=\"156\"\n      x2=\"156\"\n      y2=\"100\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M32,48V208a16.01833,16.01833,0,0,0,16,16H208a16.01833,16.01833,0,0,0,16-16V48a16.01833,16.01833,0,0,0-16-16H48A16.01833,16.01833,0,0,0,32,48ZM94.34326,150.34277,136.686,108H108a8,8,0,0,1,0-16h48c.05981,0,.11768.00781.17725.00879.20251.00488.405.01123.60693.03076.13867.01367.27344.03857.41.05908.12171.01856.24366.03174.36451.05567.14636.02881.2882.06884.43151.10547.10938.02783.21949.05175.32789.084.13732.042.27014.09277.40429.1416.11231.04053.22547.07715.33618.12305.12281.05078.24073.11035.36036.167.1173.05566.23559.10742.35058.16895.11231.06054.219.1289.32813.19384.11523.06885.23181.13428.34423.20948.1167.07812.22669.165.339.249.09681.07227.19629.13965.29053.21728.1825.14991.35657.30909.525.47413.01953.01953.041.03515.0603.05468.01672.01661.03052.03516.04712.05225.168.1709.32959.34766.48169.53271.08007.09766.14966.2002.22436.3003.0813.10888.166.21582.242.3291.07788.11621.1455.2373.21655.35644.0625.105.12829.207.186.31495.06482.12109.11988.2456.178.36914.05322.11328.10987.22461.158.34033.04956.11963.0896.24219.13318.36377.04468.125.09253.24756.13123.375.0371.123.06433.24756.09545.37158.03235.12891.06861.25635.09449.38721.02881.145.04614.2915.06677.4375.01587.1123.03747.22265.04858.33642.026.26367.03992.52832.03992.793V148a8,8,0,0,1-16,0V119.314l-42.34326,42.34327a8.00018,8.00018,0,0,1-11.31348-11.31446Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      transform=\"translate(0 256) rotate(-90)\"\n      strokeWidth=\"12\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <polyline\n      points=\"108 100 156 100 156 148\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"100\"\n      y1=\"156\"\n      x2=\"156\"\n      y2=\"100\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      transform=\"translate(0 256) rotate(-90)\"\n      strokeWidth=\"8\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <polyline\n      points=\"108 100 156 100 156 148\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"100\"\n      y1=\"156\"\n      x2=\"156\"\n      y2=\"100\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <rect\n      x=\"40\"\n      y=\"40\"\n      width=\"176\"\n      height=\"176\"\n      rx=\"8\"\n      transform=\"translate(0 256) rotate(-90)\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <polyline\n      points=\"108 100 156 100 156 148\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"100\"\n      y1=\"156\"\n      x2=\"156\"\n      y2=\"100\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst ArrowSquareUpRight = forwardRef<SVGSVGElement, IconProps>(\n  (props, ref) => <IconBase ref={ref} {...props} renderPath={renderPath} />\n);\n\nArrowSquareUpRight.displayName = \"ArrowSquareUpRight\";\n\nexport default ArrowSquareUpRight;\n"]},"metadata":{},"sourceType":"module"}