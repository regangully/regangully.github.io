{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { renderPathForWeight } from '../lib/index.esm.js';\nimport IconBase from '../lib/IconBase.esm.js';\n/* GENERATED FILE */\n\nvar pathsByWeight = /*#__PURE__*/new Map();\npathsByWeight.set(\"bold\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"220\",\n    y1: \"128\",\n    x2: \"220\",\n    y2: \"176\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"196\",\n    y1: \"152\",\n    x2: \"244\",\n    y2: \"152\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"80\",\n    y1: \"36\",\n    x2: \"80\",\n    y2: \"76\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"60\",\n    y1: \"56\",\n    x2: \"100\",\n    y2: \"56\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"164\",\n    y1: \"188\",\n    x2: \"164\",\n    y2: \"220\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"line\", {\n    x1: \"148\",\n    y1: \"204\",\n    x2: \"180\",\n    y2: \"204\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"rect\", {\n    x: \"14.86292\",\n    y: \"105.37258\",\n    width: \"226.27417\",\n    height: \"45.25483\",\n    rx: \"8\",\n    transform: \"translate(-53.01934 128) rotate(-45)\",\n    strokeWidth: \"24\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"line\", {\n    x1: \"144\",\n    y1: \"80\",\n    x2: \"176\",\n    y2: \"112\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }));\n});\npathsByWeight.set(\"duotone\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M69.65685,218.34315a8,8,0,0,1-11.3137,0l-20.6863-20.6863a8,8,0,0,1,0-11.3137L144,80l32,32Z\",\n    opacity: \"0.2\"\n  }), React.createElement(\"line\", {\n    x1: \"216\",\n    y1: \"128\",\n    x2: \"216\",\n    y2: \"176\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"192\",\n    y1: \"152\",\n    x2: \"240\",\n    y2: \"152\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"84\",\n    y1: \"40\",\n    x2: \"84\",\n    y2: \"80\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"64\",\n    y1: \"60\",\n    x2: \"104\",\n    y2: \"60\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"168\",\n    y1: \"184\",\n    x2: \"168\",\n    y2: \"216\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"152\",\n    y1: \"200\",\n    x2: \"184\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"rect\", {\n    x: \"14.86292\",\n    y: \"105.37258\",\n    width: \"226.27417\",\n    height: \"45.25483\",\n    rx: \"8\",\n    transform: \"translate(-53.01934 128) rotate(-45)\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"line\", {\n    x1: \"144\",\n    y1: \"80\",\n    x2: \"176\",\n    y2: \"112\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\npathsByWeight.set(\"fill\", function () {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M248,152a8.00008,8.00008,0,0,1-8,8H224v16a8,8,0,0,1-16,0V160H192a8,8,0,0,1,0-16h16V128a8,8,0,0,1,16,0v16h16A8.00008,8.00008,0,0,1,248,152ZM64,68H76V80a8,8,0,0,0,16,0V68h12a8,8,0,0,0,0-16H92V40a8,8,0,0,0-16,0V52H64a8,8,0,0,0,0,16ZM184,192h-8v-8a8,8,0,0,0-16,0v8h-8a8,8,0,0,0,0,16h8v8a8,8,0,0,0,16,0v-8h8a8,8,0,0,0,0-16Zm-2.34619-74.33984L75.31445,224a16.02252,16.02252,0,0,1-22.62793.001L32,203.31348a15.99888,15.99888,0,0,1,.001-22.62793L180.68555,32a16.02162,16.02162,0,0,1,22.62793-.001L224,52.68652a15.99888,15.99888,0,0,1-.001,22.62793l-42.33886,42.33887-.00293.00342ZM155.314,80,176,100.686,212.68555,64l.001-.001.00684-.00732L192,43.31348Z\"\n  }));\n});\npathsByWeight.set(\"light\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216\",\n    y1: \"128\",\n    x2: \"216\",\n    y2: \"176\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"192\",\n    y1: \"152\",\n    x2: \"240\",\n    y2: \"152\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"84\",\n    y1: \"40\",\n    x2: \"84\",\n    y2: \"80\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"64\",\n    y1: \"60\",\n    x2: \"104\",\n    y2: \"60\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"168\",\n    y1: \"184\",\n    x2: \"168\",\n    y2: \"216\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"line\", {\n    x1: \"152\",\n    y1: \"200\",\n    x2: \"184\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"rect\", {\n    x: \"14.86292\",\n    y: \"105.37258\",\n    width: \"226.27417\",\n    height: \"45.25483\",\n    rx: \"8\",\n    transform: \"translate(-53.01934 128) rotate(-45)\",\n    strokeWidth: \"12\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"line\", {\n    x1: \"144\",\n    y1: \"80\",\n    x2: \"176\",\n    y2: \"112\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }));\n});\npathsByWeight.set(\"thin\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216\",\n    y1: \"128\",\n    x2: \"216\",\n    y2: \"176\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"192\",\n    y1: \"152\",\n    x2: \"240\",\n    y2: \"152\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"84\",\n    y1: \"40\",\n    x2: \"84\",\n    y2: \"80\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"64\",\n    y1: \"60\",\n    x2: \"104\",\n    y2: \"60\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"168\",\n    y1: \"184\",\n    x2: \"168\",\n    y2: \"216\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"line\", {\n    x1: \"152\",\n    y1: \"200\",\n    x2: \"184\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"rect\", {\n    x: \"14.86292\",\n    y: \"105.37258\",\n    width: \"226.27417\",\n    height: \"45.25483\",\n    rx: \"8\",\n    transform: \"translate(-53.01934 128) rotate(-45)\",\n    strokeWidth: \"8\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"line\", {\n    x1: \"144\",\n    y1: \"80\",\n    x2: \"176\",\n    y2: \"112\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }));\n});\npathsByWeight.set(\"regular\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216\",\n    y1: \"128\",\n    x2: \"216\",\n    y2: \"176\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"192\",\n    y1: \"152\",\n    x2: \"240\",\n    y2: \"152\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"84\",\n    y1: \"40\",\n    x2: \"84\",\n    y2: \"80\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"64\",\n    y1: \"60\",\n    x2: \"104\",\n    y2: \"60\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"168\",\n    y1: \"184\",\n    x2: \"168\",\n    y2: \"216\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"line\", {\n    x1: \"152\",\n    y1: \"200\",\n    x2: \"184\",\n    y2: \"200\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"rect\", {\n    x: \"14.86292\",\n    y: \"105.37258\",\n    width: \"226.27417\",\n    height: \"45.25483\",\n    rx: \"8\",\n    transform: \"translate(-53.01934 128) rotate(-45)\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"line\", {\n    x1: \"144\",\n    y1: \"80\",\n    x2: \"176\",\n    y2: \"112\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }));\n});\n\nvar renderPath = function renderPath(weight, color) {\n  return renderPathForWeight(weight, color, pathsByWeight);\n};\n\nvar MagicWand = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(IconBase, Object.assign({\n    ref: ref\n  }, props, {\n    renderPath: renderPath\n  }));\n});\nMagicWand.displayName = \"MagicWand\";\nexport default MagicWand;","map":{"version":3,"sources":["../../src/icons/MagicWand.tsx"],"names":["pathsByWeight","x1","y1","x2","y2","fill","stroke","color","strokeLinecap","strokeLinejoin","strokeWidth","x","y","width","height","rx","transform","d","opacity","renderPath","renderPathForWeight","MagicWand","forwardRef","ref","props"],"mappings":"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","sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <line\n      x1=\"220\"\n      y1=\"128\"\n      x2=\"220\"\n      y2=\"176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"196\"\n      y1=\"152\"\n      x2=\"244\"\n      y2=\"152\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"80\"\n      y1=\"36\"\n      x2=\"80\"\n      y2=\"76\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"60\"\n      y1=\"56\"\n      x2=\"100\"\n      y2=\"56\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"164\"\n      y1=\"188\"\n      x2=\"164\"\n      y2=\"220\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <line\n      x1=\"148\"\n      y1=\"204\"\n      x2=\"180\"\n      y2=\"204\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <rect\n      x=\"14.86292\"\n      y=\"105.37258\"\n      width=\"226.27417\"\n      height=\"45.25483\"\n      rx=\"8\"\n      transform=\"translate(-53.01934 128) rotate(-45)\"\n      strokeWidth=\"24\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"144\"\n      y1=\"80\"\n      x2=\"176\"\n      y2=\"112\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <path\n      d=\"M69.65685,218.34315a8,8,0,0,1-11.3137,0l-20.6863-20.6863a8,8,0,0,1,0-11.3137L144,80l32,32Z\"\n      opacity=\"0.2\"\n    />\n    <line\n      x1=\"216\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"152\"\n      x2=\"240\"\n      y2=\"152\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"84\"\n      y1=\"40\"\n      x2=\"84\"\n      y2=\"80\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"60\"\n      x2=\"104\"\n      y2=\"60\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"168\"\n      y1=\"184\"\n      x2=\"168\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"152\"\n      y1=\"200\"\n      x2=\"184\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <rect\n      x=\"14.86292\"\n      y=\"105.37258\"\n      width=\"226.27417\"\n      height=\"45.25483\"\n      rx=\"8\"\n      transform=\"translate(-53.01934 128) rotate(-45)\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"144\"\n      y1=\"80\"\n      x2=\"176\"\n      y2=\"112\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M248,152a8.00008,8.00008,0,0,1-8,8H224v16a8,8,0,0,1-16,0V160H192a8,8,0,0,1,0-16h16V128a8,8,0,0,1,16,0v16h16A8.00008,8.00008,0,0,1,248,152ZM64,68H76V80a8,8,0,0,0,16,0V68h12a8,8,0,0,0,0-16H92V40a8,8,0,0,0-16,0V52H64a8,8,0,0,0,0,16ZM184,192h-8v-8a8,8,0,0,0-16,0v8h-8a8,8,0,0,0,0,16h8v8a8,8,0,0,0,16,0v-8h8a8,8,0,0,0,0-16Zm-2.34619-74.33984L75.31445,224a16.02252,16.02252,0,0,1-22.62793.001L32,203.31348a15.99888,15.99888,0,0,1,.001-22.62793L180.68555,32a16.02162,16.02162,0,0,1,22.62793-.001L224,52.68652a15.99888,15.99888,0,0,1-.001,22.62793l-42.33886,42.33887-.00293.00342ZM155.314,80,176,100.686,212.68555,64l.001-.001.00684-.00732L192,43.31348Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <line\n      x1=\"216\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"152\"\n      x2=\"240\"\n      y2=\"152\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"84\"\n      y1=\"40\"\n      x2=\"84\"\n      y2=\"80\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"60\"\n      x2=\"104\"\n      y2=\"60\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"168\"\n      y1=\"184\"\n      x2=\"168\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <line\n      x1=\"152\"\n      y1=\"200\"\n      x2=\"184\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <rect\n      x=\"14.86292\"\n      y=\"105.37258\"\n      width=\"226.27417\"\n      height=\"45.25483\"\n      rx=\"8\"\n      transform=\"translate(-53.01934 128) rotate(-45)\"\n      strokeWidth=\"12\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"144\"\n      y1=\"80\"\n      x2=\"176\"\n      y2=\"112\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <line\n      x1=\"216\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"152\"\n      x2=\"240\"\n      y2=\"152\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"84\"\n      y1=\"40\"\n      x2=\"84\"\n      y2=\"80\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"60\"\n      x2=\"104\"\n      y2=\"60\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"168\"\n      y1=\"184\"\n      x2=\"168\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <line\n      x1=\"152\"\n      y1=\"200\"\n      x2=\"184\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <rect\n      x=\"14.86292\"\n      y=\"105.37258\"\n      width=\"226.27417\"\n      height=\"45.25483\"\n      rx=\"8\"\n      transform=\"translate(-53.01934 128) rotate(-45)\"\n      strokeWidth=\"8\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"144\"\n      y1=\"80\"\n      x2=\"176\"\n      y2=\"112\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <line\n      x1=\"216\"\n      y1=\"128\"\n      x2=\"216\"\n      y2=\"176\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"192\"\n      y1=\"152\"\n      x2=\"240\"\n      y2=\"152\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"84\"\n      y1=\"40\"\n      x2=\"84\"\n      y2=\"80\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"64\"\n      y1=\"60\"\n      x2=\"104\"\n      y2=\"60\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"168\"\n      y1=\"184\"\n      x2=\"168\"\n      y2=\"216\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <line\n      x1=\"152\"\n      y1=\"200\"\n      x2=\"184\"\n      y2=\"200\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <rect\n      x=\"14.86292\"\n      y=\"105.37258\"\n      width=\"226.27417\"\n      height=\"45.25483\"\n      rx=\"8\"\n      transform=\"translate(-53.01934 128) rotate(-45)\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <line\n      x1=\"144\"\n      y1=\"80\"\n      x2=\"176\"\n      y2=\"112\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst MagicWand = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nMagicWand.displayName = \"MagicWand\";\n\nexport default MagicWand;\n"]},"metadata":{},"sourceType":"module"}