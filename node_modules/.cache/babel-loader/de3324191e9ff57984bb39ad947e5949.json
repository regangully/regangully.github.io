{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { renderPathForWeight } from '../lib/index.esm.js';\nimport IconBase from '../lib/IconBase.esm.js';\n/* GENERATED FILE */\n\nvar pathsByWeight = /*#__PURE__*/new Map();\npathsByWeight.set(\"bold\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216.00488\",\n    y1: \"39.99414\",\n    x2: \"40.00488\",\n    y2: \"39.99414\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"rect\", {\n    x: \"122\",\n    y: \"106\",\n    width: \"104\",\n    height: \"52\",\n    rx: \"8\",\n    transform: \"translate(306 -42) rotate(90)\",\n    strokeWidth: \"24\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"rect\", {\n    x: \"56\",\n    y: \"80\",\n    width: \"52\",\n    height: \"144\",\n    rx: \"8\",\n    strokeWidth: \"24\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }));\n});\npathsByWeight.set(\"duotone\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"rect\", {\n    x: \"116\",\n    y: \"100\",\n    width: \"112\",\n    height: \"56\",\n    rx: \"8\",\n    transform: \"translate(300 -44) rotate(90)\",\n    opacity: \"0.2\"\n  }), React.createElement(\"rect\", {\n    x: \"56\",\n    y: \"72\",\n    width: \"56\",\n    height: \"152\",\n    rx: \"8\",\n    opacity: \"0.2\"\n  }), React.createElement(\"line\", {\n    x1: \"216.00488\",\n    y1: \"39.99414\",\n    x2: \"40.00488\",\n    y2: \"39.99414\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"rect\", {\n    x: \"116\",\n    y: \"100\",\n    width: \"112\",\n    height: \"56\",\n    rx: \"8\",\n    transform: \"translate(300 -44) rotate(90)\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"rect\", {\n    x: \"56\",\n    y: \"72\",\n    width: \"56\",\n    height: \"152\",\n    rx: \"8\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }));\n});\npathsByWeight.set(\"fill\", function () {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M224.00488,39.99414a7.99977,7.99977,0,0,1-8,8h-176a8,8,0,0,1,0-16h176A7.99977,7.99977,0,0,1,224.00488,39.99414ZM192,64H152a16.01833,16.01833,0,0,0-16,16v96a16.01833,16.01833,0,0,0,16,16h40a16.01833,16.01833,0,0,0,16-16V80A16.01833,16.01833,0,0,0,192,64Zm-88,0H64A16.01833,16.01833,0,0,0,48,80V216a16.01833,16.01833,0,0,0,16,16h40a16.01833,16.01833,0,0,0,16-16V80A16.01833,16.01833,0,0,0,104,64Z\"\n  }));\n});\npathsByWeight.set(\"light\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216.00488\",\n    y1: \"39.99414\",\n    x2: \"40.00488\",\n    y2: \"39.99414\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"rect\", {\n    x: \"116\",\n    y: \"100\",\n    width: \"112\",\n    height: \"56\",\n    rx: \"8\",\n    transform: \"translate(300 -44) rotate(90)\",\n    strokeWidth: \"12\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"rect\", {\n    x: \"56\",\n    y: \"72\",\n    width: \"56\",\n    height: \"152\",\n    rx: \"8\",\n    strokeWidth: \"12\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }));\n});\npathsByWeight.set(\"thin\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216.00488\",\n    y1: \"39.99414\",\n    x2: \"40.00488\",\n    y2: \"39.99414\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"rect\", {\n    x: \"116\",\n    y: \"100\",\n    width: \"112\",\n    height: \"56\",\n    rx: \"8\",\n    transform: \"translate(300 -44) rotate(90)\",\n    strokeWidth: \"8\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"rect\", {\n    x: \"56\",\n    y: \"72\",\n    width: \"56\",\n    height: \"152\",\n    rx: \"8\",\n    strokeWidth: \"8\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }));\n});\npathsByWeight.set(\"regular\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"216.00488\",\n    y1: \"39.99414\",\n    x2: \"40.00488\",\n    y2: \"39.99414\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"rect\", {\n    x: \"116\",\n    y: \"100\",\n    width: \"112\",\n    height: \"56\",\n    rx: \"8\",\n    transform: \"translate(300 -44) rotate(90)\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"rect\", {\n    x: \"56\",\n    y: \"72\",\n    width: \"56\",\n    height: \"152\",\n    rx: \"8\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }));\n});\n\nvar renderPath = function renderPath(weight, color) {\n  return renderPathForWeight(weight, color, pathsByWeight);\n};\n\nvar AlignTop = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(IconBase, Object.assign({\n    ref: ref\n  }, props, {\n    renderPath: renderPath\n  }));\n});\nAlignTop.displayName = \"AlignTop\";\nexport default AlignTop;","map":{"version":3,"sources":["../../src/icons/AlignTop.tsx"],"names":["pathsByWeight","x1","y1","x2","y2","fill","stroke","color","strokeLinecap","strokeLinejoin","strokeWidth","x","y","width","height","rx","transform","opacity","d","renderPath","renderPathForWeight","AlignTop","forwardRef","ref","props"],"mappings":"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","sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <line\n      x1=\"216.00488\"\n      y1=\"39.99414\"\n      x2=\"40.00488\"\n      y2=\"39.99414\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <rect\n      x=\"122\"\n      y=\"106\"\n      width=\"104\"\n      height=\"52\"\n      rx=\"8\"\n      transform=\"translate(306 -42) rotate(90)\"\n      strokeWidth=\"24\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <rect\n      x=\"56\"\n      y=\"80\"\n      width=\"52\"\n      height=\"144\"\n      rx=\"8\"\n      strokeWidth=\"24\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <rect\n      x=\"116\"\n      y=\"100\"\n      width=\"112\"\n      height=\"56\"\n      rx=\"8\"\n      transform=\"translate(300 -44) rotate(90)\"\n      opacity=\"0.2\"\n    />\n    <rect x=\"56\" y=\"72\" width=\"56\" height=\"152\" rx=\"8\" opacity=\"0.2\" />\n    <line\n      x1=\"216.00488\"\n      y1=\"39.99414\"\n      x2=\"40.00488\"\n      y2=\"39.99414\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <rect\n      x=\"116\"\n      y=\"100\"\n      width=\"112\"\n      height=\"56\"\n      rx=\"8\"\n      transform=\"translate(300 -44) rotate(90)\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <rect\n      x=\"56\"\n      y=\"72\"\n      width=\"56\"\n      height=\"152\"\n      rx=\"8\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M224.00488,39.99414a7.99977,7.99977,0,0,1-8,8h-176a8,8,0,0,1,0-16h176A7.99977,7.99977,0,0,1,224.00488,39.99414ZM192,64H152a16.01833,16.01833,0,0,0-16,16v96a16.01833,16.01833,0,0,0,16,16h40a16.01833,16.01833,0,0,0,16-16V80A16.01833,16.01833,0,0,0,192,64Zm-88,0H64A16.01833,16.01833,0,0,0,48,80V216a16.01833,16.01833,0,0,0,16,16h40a16.01833,16.01833,0,0,0,16-16V80A16.01833,16.01833,0,0,0,104,64Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <line\n      x1=\"216.00488\"\n      y1=\"39.99414\"\n      x2=\"40.00488\"\n      y2=\"39.99414\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <rect\n      x=\"116\"\n      y=\"100\"\n      width=\"112\"\n      height=\"56\"\n      rx=\"8\"\n      transform=\"translate(300 -44) rotate(90)\"\n      strokeWidth=\"12\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <rect\n      x=\"56\"\n      y=\"72\"\n      width=\"56\"\n      height=\"152\"\n      rx=\"8\"\n      strokeWidth=\"12\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <line\n      x1=\"216.00488\"\n      y1=\"39.99414\"\n      x2=\"40.00488\"\n      y2=\"39.99414\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <rect\n      x=\"116\"\n      y=\"100\"\n      width=\"112\"\n      height=\"56\"\n      rx=\"8\"\n      transform=\"translate(300 -44) rotate(90)\"\n      strokeWidth=\"8\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <rect\n      x=\"56\"\n      y=\"72\"\n      width=\"56\"\n      height=\"152\"\n      rx=\"8\"\n      strokeWidth=\"8\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <line\n      x1=\"216.00488\"\n      y1=\"39.99414\"\n      x2=\"40.00488\"\n      y2=\"39.99414\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <rect\n      x=\"116\"\n      y=\"100\"\n      width=\"112\"\n      height=\"56\"\n      rx=\"8\"\n      transform=\"translate(300 -44) rotate(90)\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <rect\n      x=\"56\"\n      y=\"72\"\n      width=\"56\"\n      height=\"152\"\n      rx=\"8\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst AlignTop = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nAlignTop.displayName = \"AlignTop\";\n\nexport default AlignTop;\n"]},"metadata":{},"sourceType":"module"}