{"ast":null,"code":"var _jsxFileName = \"/Users/regangully/Development/regangully.github.io/src/Components/AnimatedText/AnimatedText.tsx\";\nimport { motion } from \"framer-motion\"; // Word wrapper\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wrapper = props => {\n  // We'll do this to prevent wrapping of words using CSS\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}; // Map API \"type\" vaules to JSX tag names\n\n\n_c = Wrapper;\nconst tagMap = {\n  \"paragraph\": \"p\",\n  \"heading1\": \"h1\",\n  \"heading2\": \"h2\"\n}; // AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\n\nconst AnimatedCharacters = props => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      color: \"#FFF\",\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.85\n      }\n    },\n    visible: {\n      y: 0,\n      color: \"#FFF\",\n      transition: {\n        ease: [0.455, 0.03, 0.515, 0.955],\n        duration: 0.75\n      }\n    }\n  }; //  Split each word of props.text into an array\n\n  const splitWords = props.text.split(\" \"); // Create storage array\n\n  const words = []; // Push each word into words array\n\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  } // Add a space (\"\\u00A0\") to the end of each word\n\n\n  words.map(word => {\n    return word.push(\"\\u00A0\");\n  }); // Get the tag name from tagMap\n\n  const Tag = tagMap[props.type];\n  return /*#__PURE__*/_jsxDEV(Tag, {\n    className: props.classes,\n    children: words.map((word, index) => {\n      return (\n        /*#__PURE__*/\n        // Wrap each word in the Wrapper component\n        _jsxDEV(Wrapper, {\n          children: words[index].flat().map((element, index) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              style: {\n                overflow: \"hidden\",\n                display: \"inline-block\"\n              },\n              children: /*#__PURE__*/_jsxDEV(motion.span, {\n                style: {\n                  display: \"inline-block\"\n                },\n                variants: item,\n                children: element\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 17\n            }, this);\n          })\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      );\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = AnimatedCharacters;\nexport default AnimatedCharacters;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"AnimatedCharacters\");","map":{"version":3,"sources":["/Users/regangully/Development/regangully.github.io/src/Components/AnimatedText/AnimatedText.tsx"],"names":["motion","Wrapper","props","children","tagMap","AnimatedCharacters","item","hidden","y","color","transition","ease","duration","visible","splitWords","text","split","words","entries","push","map","word","Tag","type","classes","index","flat","element","overflow","display"],"mappings":";AAAA,SAASA,MAAT,QAAuB,eAAvB,C,CAEA;;;;AACA,MAAMC,OAAO,GAAIC,KAAD,IAAgB;AAC9B;AACA,sBAAO;AAAA,cAAOA,KAAK,CAACC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAHD,C,CAKA;;;KALMF,O;AAMN,MAAMG,MAAW,GAAG;AAClB,eAAa,GADK;AAElB,cAAY,IAFM;AAGlB,cAAY;AAHM,CAApB,C,CAMA;AACA;AACA;;AACA,MAAMC,kBAAkB,GAAIH,KAAD,IAAgB;AACzC;AACA,QAAMI,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE;AACNC,MAAAA,CAAC,EAAE,MADG;AAENC,MAAAA,KAAK,EAAE,MAFD;AAGNC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,KAArB,CAAR;AAAqCC,QAAAA,QAAQ,EAAE;AAA/C;AAHN,KADG;AAMXC,IAAAA,OAAO,EAAE;AACPL,MAAAA,CAAC,EAAE,CADI;AAEPC,MAAAA,KAAK,EAAE,MAFA;AAGPC,MAAAA,UAAU,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAd,EAAqB,KAArB,CAAR;AAAqCC,QAAAA,QAAQ,EAAE;AAA/C;AAHL;AANE,GAAb,CAFyC,CAezC;;AACA,QAAME,UAAU,GAAGZ,KAAK,CAACa,IAAN,CAAWC,KAAX,CAAiB,GAAjB,CAAnB,CAhByC,CAkBzC;;AACA,QAAMC,KAAY,GAAG,EAArB,CAnByC,CAqBzC;;AACA,OAAK,MAAM,GAAGX,IAAH,CAAX,IAAuBQ,UAAU,CAACI,OAAX,EAAvB,EAA6C;AAC3CD,IAAAA,KAAK,CAACE,IAAN,CAAWb,IAAI,CAACU,KAAL,CAAW,EAAX,CAAX;AACD,GAxBwC,CA0BzC;;;AACAC,EAAAA,KAAK,CAACG,GAAN,CAAWC,IAAD,IAAU;AAClB,WAAOA,IAAI,CAACF,IAAL,CAAU,QAAV,CAAP;AACD,GAFD,EA3ByC,CA+BzC;;AACA,QAAMG,GAAG,GAAGlB,MAAM,CAACF,KAAK,CAACqB,IAAP,CAAlB;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,SAAS,EAAErB,KAAK,CAACsB,OAAtB;AAAA,cACGP,KAAK,CAACG,GAAN,CAAU,CAACC,IAAD,EAAOI,KAAP,KAAiB;AAC1B;AAAA;AACE;AACA,gBAAC,OAAD;AAAA,oBACGR,KAAK,CAACQ,KAAD,CAAL,CAAaC,IAAb,GAAoBN,GAApB,CAAwB,CAACO,OAAD,EAAeF,KAAf,KAAiC;AACxD,gCACE;AACE,cAAA,KAAK,EAAE;AACLG,gBAAAA,QAAQ,EAAE,QADL;AAELC,gBAAAA,OAAO,EAAE;AAFJ,eADT;AAAA,qCAOE,QAAC,MAAD,CAAQ,IAAR;AACE,gBAAA,KAAK,EAAE;AAAEA,kBAAAA,OAAO,EAAE;AAAX,iBADT;AAEE,gBAAA,QAAQ,EAAEvB,IAFZ;AAAA,0BAIGqB;AAJH;AAAA;AAAA;AAAA;AAAA;AAPF,eAKOF,KALP;AAAA;AAAA;AAAA;AAAA,oBADF;AAgBD,WAjBA;AADH,WAAcA,KAAd;AAAA;AAAA;AAAA;AAAA;AAFF;AAuBD,KAxBA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD,CAhED;;MAAMpB,kB;AAkEN,eAAeA,kBAAf","sourcesContent":["import { motion } from \"framer-motion\";\n\n// Word wrapper\nconst Wrapper = (props: any) => {\n  // We'll do this to prevent wrapping of words using CSS\n  return <span>{props.children}</span>;\n};\n\n// Map API \"type\" vaules to JSX tag names\nconst tagMap: any = {\n  \"paragraph\": \"p\",\n  \"heading1\": \"h1\",\n  \"heading2\": \"h2\"\n};\n\n// AnimatedCharacters\n// Handles the deconstruction of each word and character to setup for the\n// individual character animations\nconst AnimatedCharacters = (props: any) => {\n  // Framer Motion variant object, for controlling animation\n  const item = {\n    hidden: {\n      y: \"200%\",\n      color: \"#FFF\",\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.85 }\n    },\n    visible: {\n      y: 0,\n      color: \"#FFF\",\n      transition: { ease: [0.455, 0.03, 0.515, 0.955], duration: 0.75 }\n    }\n  };\n\n  //  Split each word of props.text into an array\n  const splitWords = props.text.split(\" \");\n\n  // Create storage array\n  const words: any[] = [];\n\n  // Push each word into words array\n  for (const [, item] of splitWords.entries()) {\n    words.push(item.split(\"\"));\n  }\n\n  // Add a space (\"\\u00A0\") to the end of each word\n  words.map((word) => {\n    return word.push(\"\\u00A0\");\n  });\n\n  // Get the tag name from tagMap\n  const Tag = tagMap[props.type];\n\n  return (\n    <Tag className={props.classes}>\n      {words.map((word, index) => {\n        return (\n          // Wrap each word in the Wrapper component\n          <Wrapper key={index}>\n            {words[index].flat().map((element: any, index: number) => {\n              return (\n                <span\n                  style={{\n                    overflow: \"hidden\",\n                    display: \"inline-block\"\n                  }}\n                  key={index}\n                >\n                  <motion.span\n                    style={{ display: \"inline-block\" }}\n                    variants={item}\n                  >\n                    {element}\n                  </motion.span>\n                </span>\n              );\n            })}\n          </Wrapper>\n        );\n      })}\n      {/* {} */}\n    </Tag>\n  );\n};\n\nexport default AnimatedCharacters;\n"]},"metadata":{},"sourceType":"module"}