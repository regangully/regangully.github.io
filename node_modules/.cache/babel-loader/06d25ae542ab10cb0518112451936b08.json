{"ast":null,"code":"import React, { forwardRef } from 'react';\nimport { renderPathForWeight } from '../lib/index.esm.js';\nimport IconBase from '../lib/IconBase.esm.js';\n/* GENERATED FILE */\n\nvar pathsByWeight = /*#__PURE__*/new Map();\npathsByWeight.set(\"bold\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"68\",\n    y1: \"32\",\n    x2: \"134\",\n    y2: \"164\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"rect\", {\n    x: \"68\",\n    y: \"32\",\n    width: \"66\",\n    height: \"132\",\n    strokeWidth: \"24\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164v66a66,66,0,0,1-66-66\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164h8a66,66,0,0,0,0-132h-8\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"24\"\n  }));\n});\npathsByWeight.set(\"duotone\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"polygon\", {\n    points: \"68 32 68 164 134 164 68 32\",\n    opacity: \"0.2\"\n  }), React.createElement(\"line\", {\n    x1: \"68\",\n    y1: \"32\",\n    x2: \"134\",\n    y2: \"164\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"rect\", {\n    x: \"68\",\n    y: \"32\",\n    width: \"66\",\n    height: \"132\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164v66a66,66,0,0,1-66-66\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164h8a66,66,0,0,0,0-132h-8\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164h8a66,66,0,0,0,0-132h-8Z\",\n    opacity: \"0.2\"\n  }));\n});\npathsByWeight.set(\"fill\", function () {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    d: \"M142,24H68c-.06836,0-.13477.00855-.20264.01026-.16162.004-.32275.01056-.48486.02447-.11377.00971-.22607.02387-.33838.03833-.14307.0185-.28613.039-.42871.06543-.13232.02429-.26221.05359-.39209.08435-.11865.02826-.23682.05725-.35449.09113-.15088.04315-.29883.09216-.4458.14386-.09668.034-.19287.06769-.28907.10565-.16113.06366-.31787.134-.47363.20764-.05566.02625-.11279.046-.168.07361-.03027.0152-.05761.03412-.08789.04968-.14795.0766-.2915.15979-.43408.24512-.0918.05481-.18457.10828-.27393.16626-.11572.07574-.22607.15729-.33789.23871-.10644.07776-.21435.15423-.3164.23657-.084.06811-.16309.14117-.24463.21258-.11719.10267-.23438.20472-.34473.31336-.06543.06445-.12549.13342-.18847.20007-.11426.12036-.228.2403-.3335.36682-.064.07611-.12158.15693-.18213.23542-.09424.12188-.18945.24267-.27637.36926-.07129.10406-.13476.21338-.20166.321-.06591.10669-.13427.21155-.19482.321-.0752.13513-.14111.27551-.2085.41528-.04248.08838-.08838.17493-.12744.26471-.0664.15186-.123.30841-.18017.465-.03125.08538-.06543.16943-.09375.25586-.04834.14813-.08741.2998-.127.45159-.02685.10328-.05664.20563-.07959.31-.02832.13-.04931.26233-.07129.39453-.02246.134-.04541.2674-.06152.40259-.01221.10742-.01855.21619-.02637.32483-.01269.16376-.023.32745-.0249.49225C60.00488,31.93187,60,31.96537,60,32V164a74.08385,74.08385,0,0,0,74,74,8.00008,8.00008,0,0,0,8-8V172a74,74,0,0,0,0-148ZM126,130.11137,80.94434,40H126ZM76.55176,172H126v49.4502A58.12735,58.12735,0,0,1,76.55176,172ZM142,156V40a58,58,0,0,1,0,116Z\"\n  }));\n});\npathsByWeight.set(\"light\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"68\",\n    y1: \"32\",\n    x2: \"134\",\n    y2: \"164\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"rect\", {\n    x: \"68\",\n    y: \"32\",\n    width: \"66\",\n    height: \"132\",\n    strokeWidth: \"12\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164v66a66,66,0,0,1-66-66\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164h8a66,66,0,0,0,0-132h-8\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"12\"\n  }));\n});\npathsByWeight.set(\"thin\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"line\", {\n    x1: \"68\",\n    y1: \"32\",\n    x2: \"134\",\n    y2: \"164\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"rect\", {\n    x: \"68\",\n    y: \"32\",\n    width: \"66\",\n    height: \"132\",\n    strokeWidth: \"8\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164v66a66,66,0,0,1-66-66\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164h8a66,66,0,0,0,0-132h-8\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"8\"\n  }));\n});\npathsByWeight.set(\"regular\", function (color) {\n  return React.createElement(React.Fragment, null, React.createElement(\"g\", null, React.createElement(\"line\", {\n    x1: \"68\",\n    y1: \"32\",\n    x2: \"134\",\n    y2: \"164\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"rect\", {\n    x: \"68\",\n    y: \"32\",\n    width: \"66\",\n    height: \"132\",\n    strokeWidth: \"16\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164v66a66,66,0,0,1-66-66\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  }), React.createElement(\"path\", {\n    d: \"M134,164h8a66,66,0,0,0,0-132h-8\",\n    fill: \"none\",\n    stroke: color,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"16\"\n  })));\n});\n\nvar renderPath = function renderPath(weight, color) {\n  return renderPathForWeight(weight, color, pathsByWeight);\n};\n\nvar PhosphorLogo = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(IconBase, Object.assign({\n    ref: ref\n  }, props, {\n    renderPath: renderPath\n  }));\n});\nPhosphorLogo.displayName = \"PhosphorLogo\";\nexport default PhosphorLogo;","map":{"version":3,"sources":["../../src/icons/PhosphorLogo.tsx"],"names":["pathsByWeight","x1","y1","x2","y2","fill","stroke","color","strokeLinecap","strokeLinejoin","strokeWidth","x","y","width","height","d","points","opacity","renderPath","renderPathForWeight","PhosphorLogo","forwardRef","ref","props"],"mappings":"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","sourcesContent":["/* GENERATED FILE */\nimport React, { forwardRef } from \"react\";\n\nimport {\n  IconWeight,\n  IconProps,\n  PaintFunction,\n  renderPathForWeight,\n} from \"../lib\";\nimport IconBase, { RenderFunction } from \"../lib/IconBase\";\n\nconst pathsByWeight = new Map<IconWeight, PaintFunction>();\n\npathsByWeight.set(\"bold\", (color: string) => (\n  <>\n    <line\n      x1=\"68\"\n      y1=\"32\"\n      x2=\"134\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <rect\n      x=\"68\"\n      y=\"32\"\n      width=\"66\"\n      height=\"132\"\n      strokeWidth=\"24\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <path\n      d=\"M134,164v66a66,66,0,0,1-66-66\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n    <path\n      d=\"M134,164h8a66,66,0,0,0,0-132h-8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"24\"\n    />\n  </>\n));\n\npathsByWeight.set(\"duotone\", (color: string) => (\n  <>\n    <polygon points=\"68 32 68 164 134 164 68 32\" opacity=\"0.2\" />\n    <line\n      x1=\"68\"\n      y1=\"32\"\n      x2=\"134\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <rect\n      x=\"68\"\n      y=\"32\"\n      width=\"66\"\n      height=\"132\"\n      strokeWidth=\"16\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <path\n      d=\"M134,164v66a66,66,0,0,1-66-66\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path\n      d=\"M134,164h8a66,66,0,0,0,0-132h-8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"16\"\n    />\n    <path d=\"M134,164h8a66,66,0,0,0,0-132h-8Z\" opacity=\"0.2\" />\n  </>\n));\n\npathsByWeight.set(\"fill\", () => (\n  <>\n    <path d=\"M142,24H68c-.06836,0-.13477.00855-.20264.01026-.16162.004-.32275.01056-.48486.02447-.11377.00971-.22607.02387-.33838.03833-.14307.0185-.28613.039-.42871.06543-.13232.02429-.26221.05359-.39209.08435-.11865.02826-.23682.05725-.35449.09113-.15088.04315-.29883.09216-.4458.14386-.09668.034-.19287.06769-.28907.10565-.16113.06366-.31787.134-.47363.20764-.05566.02625-.11279.046-.168.07361-.03027.0152-.05761.03412-.08789.04968-.14795.0766-.2915.15979-.43408.24512-.0918.05481-.18457.10828-.27393.16626-.11572.07574-.22607.15729-.33789.23871-.10644.07776-.21435.15423-.3164.23657-.084.06811-.16309.14117-.24463.21258-.11719.10267-.23438.20472-.34473.31336-.06543.06445-.12549.13342-.18847.20007-.11426.12036-.228.2403-.3335.36682-.064.07611-.12158.15693-.18213.23542-.09424.12188-.18945.24267-.27637.36926-.07129.10406-.13476.21338-.20166.321-.06591.10669-.13427.21155-.19482.321-.0752.13513-.14111.27551-.2085.41528-.04248.08838-.08838.17493-.12744.26471-.0664.15186-.123.30841-.18017.465-.03125.08538-.06543.16943-.09375.25586-.04834.14813-.08741.2998-.127.45159-.02685.10328-.05664.20563-.07959.31-.02832.13-.04931.26233-.07129.39453-.02246.134-.04541.2674-.06152.40259-.01221.10742-.01855.21619-.02637.32483-.01269.16376-.023.32745-.0249.49225C60.00488,31.93187,60,31.96537,60,32V164a74.08385,74.08385,0,0,0,74,74,8.00008,8.00008,0,0,0,8-8V172a74,74,0,0,0,0-148ZM126,130.11137,80.94434,40H126ZM76.55176,172H126v49.4502A58.12735,58.12735,0,0,1,76.55176,172ZM142,156V40a58,58,0,0,1,0,116Z\" />\n  </>\n));\n\npathsByWeight.set(\"light\", (color: string) => (\n  <>\n    <line\n      x1=\"68\"\n      y1=\"32\"\n      x2=\"134\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <rect\n      x=\"68\"\n      y=\"32\"\n      width=\"66\"\n      height=\"132\"\n      strokeWidth=\"12\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <path\n      d=\"M134,164v66a66,66,0,0,1-66-66\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n    <path\n      d=\"M134,164h8a66,66,0,0,0,0-132h-8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"12\"\n    />\n  </>\n));\n\npathsByWeight.set(\"thin\", (color: string) => (\n  <>\n    <line\n      x1=\"68\"\n      y1=\"32\"\n      x2=\"134\"\n      y2=\"164\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <rect\n      x=\"68\"\n      y=\"32\"\n      width=\"66\"\n      height=\"132\"\n      strokeWidth=\"8\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      fill=\"none\"\n    />\n    <path\n      d=\"M134,164v66a66,66,0,0,1-66-66\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n    <path\n      d=\"M134,164h8a66,66,0,0,0,0-132h-8\"\n      fill=\"none\"\n      stroke={color}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n      strokeWidth=\"8\"\n    />\n  </>\n));\n\npathsByWeight.set(\"regular\", (color: string) => (\n  <>\n    <g>\n      <line\n        x1=\"68\"\n        y1=\"32\"\n        x2=\"134\"\n        y2=\"164\"\n        fill=\"none\"\n        stroke={color}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"16\"\n      />\n      <rect\n        x=\"68\"\n        y=\"32\"\n        width=\"66\"\n        height=\"132\"\n        strokeWidth=\"16\"\n        stroke={color}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        fill=\"none\"\n      />\n      <path\n        d=\"M134,164v66a66,66,0,0,1-66-66\"\n        fill=\"none\"\n        stroke={color}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"16\"\n      />\n      <path\n        d=\"M134,164h8a66,66,0,0,0,0-132h-8\"\n        fill=\"none\"\n        stroke={color}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        strokeWidth=\"16\"\n      />\n    </g>\n  </>\n));\n\nconst renderPath: RenderFunction = (weight: IconWeight, color: string) =>\n  renderPathForWeight(weight, color, pathsByWeight);\n\nconst PhosphorLogo = forwardRef<SVGSVGElement, IconProps>((props, ref) => (\n  <IconBase ref={ref} {...props} renderPath={renderPath} />\n));\n\nPhosphorLogo.displayName = \"PhosphorLogo\";\n\nexport default PhosphorLogo;\n"]},"metadata":{},"sourceType":"module"}